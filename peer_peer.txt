
eval()
---------------------------------DAY 5------------------------------------------------
day 5


1) l = [1,2,3,4,5]

i need to get elements in this order [4,3,2]

use slicing to get the same?
l[1:4][::-1]

2) write a function which returns a list. fcuntion should take argument which will appedn to a list and return the list -> f(*args)

f(1) -> [1]
f('no) -> [1, 'no']
f(3) -> [1,'no',3]


def f (val, lst = []):
    lst.append(val)
    return lst







3) x = 'a','b'
y = ('a','b')

what will be the output of print (x==y) ?


4) d = [(4,5) ,(2,3),(6,7)]

4 5 6
2 3 6 4
6 7 2
3 7 5

[j for i,j in d]

write a list comprehension which will return a list whose sum is equal to 15?


5) t = ('hi','hello','bye')

lst = [1,2,3,4,5,6,7,8,9]

what will this do t * (lst.len() - sum(lst[:4]) + 1)
()

6) t = ('jaanu baby') * 7

print (type(t))
string

7) d = {(1,2):1 , (2,1):2}
d[1,2] what will be output of this?
1

8) d= {1:'a', 1.0 :'b'}

print (d)

{1:'b'}

print(type(list(d.keys())[0]))	int

9) t = ('jaanu baby',) * 7

print (type(t))
tuple
print (t)
('jaanu baby', 'jaanu baby'...)

10) d = {1.0:'a', 1:'b'}
print (d)
{1.0:'b'}

print(type(list(d.keys())[0])	float

-----------------------------------------------------------------------------------


------------------------------ DAY 6 ----------------------------------------

1) [('a',89),('b',90),('c',91),('c',92)] merge all the keys to form a list a value
o/p {'a':[89], 'b':[90], 'c':[91,92]}

d= {}
for k,v in lst:
    if k not in d:
        d[k] = [v]
    else:
        d[k] = d[k] +[v] work iyindha?
        but in any case you can use defaultdict for inistization
        d = defaultdict(list)

2) convert the string "srinaveen" to "Desu Srinaveen Mr" without using string operations

print ('Desu ' + 'srinaveen' + 'Mr'  )b -> no string operations

hint: can you it using deque -> but i don have 'desu' and 'mr' kada??
  okay you have something called appendleft() in deque which will append to the left of the list and "extend()" to the right -> i din know this
ohh i can use 'desu '  and 'mr' ah.. haan

1) s = {1,2,3,4,5,6}
print (s[3]) -> 4  wrong
chusa
sets are unordered and unindexed



2) x = [1,2,3,4,5,6,7,8,9]

single line code to convert it like this -> [(1,2,3),(4,5,6),(7,8,9)]


y =set()
print([y.add(j) for i in range(0,len(x),3) for j in x[i]])

try another way
Soln:

--->  list(zip(*iter(x) *3)) *3?

big explnation:

  iter(X)creates an iterator of the list

  iter(X) *3 gives three iterator objects

  (*) is used to unpack the elements. So effectively our objects will look like following

  [1,2,3,4,5,6,7,8,9]  [1,2,3,4,5,6,7,8,9] [1,2,3,4,5,6,7,8,9] -> using zip on this will be (1,1,1) ....

  since these are iterator objects of same list during each run the zip runs as following
  [1] [2] [3]
  [1,4] [2,5] [3,6]
  [1,4,7] [2,5,8] [3,6,9]
  zipping the last line will givee
  [1,2,3] [4,5,6] [7,8,9]


  try chestha repu
  enti nidra potunava??

  haan :(migita answer cheyuu


3) len(set([1,2,3,4,1,2,3,4])) ->error
wrong answer

answer -> 4

4) l = [[1,2] ,[3,4] ,[5,6],[7,8,9]]
flaten out  this list into [1,2,3,4,5,6] in one line

print([j for i in l for j in i]) -> this is robust re

sum(l,[])


unava?



DOUBTS:

Why set cannot be indexed?

----------------------------------------------------------------------

------------------------ DAY 7 ---------------------------


https://www.datacamp.com/community/tutorials/18-most-common-python-list-questions-learn-python

1) s = {1,2,3,4}
b = {5,6,4,3}

outout -> {1,2,3,4,5,6}


2)





print(*[iter(x)] * 3)
>>> print(zip([iter(x)]*3))
<zip object at 0x104b74b48>

for val in zip([iter(x)] * 3):
    print(val)
    for v in val:
        print(v)
        for i in v:
            print(i)



(<list_iterator object at 0x10c1ad8d0>,)
<list_iterator object at 0x10c1ad8d0>
1
2
3
4
5
6
7
8
9
(<list_iterator object at 0x10c1ad8d0>,) val
<list_iterator object at 0x10c1ad8d0> v
(<list_iterator object at 0x10c1ad8d0>,) val
<list_iterator object at 0x10c1ad8d0> v

>>> for i in zip(*[iter(x)]*3):
...     print(i)
...
(1, 2, 3)
(4, 5, 6)
(7, 8, 9)

for val in zip([1]*3):
    print(val)

for val in zip([1,1,1]):
	 print (val)


(1,)
(1,)
(1,)

print (*[1,1,1])
1 1 1





DOUBTS:

1) Where can a starred expression be used?
2) https://docs.python.org/3/library/functions.html#zip
3) https://docs.python.org/3/whatsnew/3.0.html
4) https://www.python.org/dev/peps/pep-3132/


---------------------------------------------------------------


 ------------------------- DAY 8 -------------------------------------------------


1) print (r'foo\\bar\ndes')
foo\\bar\ndes

2) name = "I am naveen"
o/p: "n ee vanmai"

for i in range(int(name)):
    spc = []
    str1 = str(input())
    print(str1)
    for i in str1:
        if i in string.whitespace:
            spc.append(str1.index(i))
    revstr = ''.join(str1.split())[::-1]
    print(revstr)
    for j in spc:
        print(revstr[:j]+ ' '+revstr[j:])


3) val = b'u r my jaanu'
convert val to string ?
str(val, 'utf-8')


4) how to remove the keys in dictionary?what happens when pop is used in dict?
del d[key]
pop will be used to remove the last inserted key

5) can python tuples have mutable objects? what happens if mutable object is modified? write an example
yes
a = ([1,2], 3, 4)
a[0].append(3)
print(a)
([1,2,3],3,4)

6) what will be o/p of
 l = [1,2,3]
 l.extend([4,5,6])

l = [1,2,3,4,5,6]

l.append([4,5,6])
l = [1,2,3 ,[4,5,6]]

6) a,b = 1,2,3

7) list -> remove() vs pop() ?




---------------------------------------------------------------------------------

 >
---------------------------------- DAY 9 -----------------------------------

1) lst = [1,2,3,4,5,6] -> create a dictionary using the list without using defaultdict

d = {k:0 for k in lst}

d ={}
for k in lst:
    if k not in d.keys():
        d[k] = 0

{}.fromkeys(lst,0)




2) l = [1,2,3]

for val in l:
    if val > 0 and val <-3:
        val = val + 3


 ANS ) 3


3) a = [how for how in l if how > 5 else 33]
print (how)

ANS) val not exist error



4) l = [1,'srilekhya',3]
for l[1] in 'lanka': print(l)

ANS)
[1, 'l', 3]
[1, 'a', 3]
[1, 'n', 3]
[1, 'k', 3]
[1, 'a', 3]

5) cities = {'san frnas': 'US', 'london': 'UK', 'manchester': 'UK', 'LA': 'US'}
o/p {'us':['San frans', 'LA'], 'UK':['london','mancherster']} -> without using dictionary comprehension

d ={}
for k,v in cities.items():
    if v not in d.keys():
        d[v] = [k]
    else:
        d[v] = d[v] + [k]

d.setdefault(cities.keys(),[]).append(
d2 = {}
for k,v in cities.items():
       d2.setdefault(v,[]).append(k))

6) I want to use break statement in a function . how can i do it?
Ans)
def fun(a):
for i in range(10):
	if a < 10:
  	break


6a) how can i write 'break' outside the for loop?
Ans) break is used to exit out of a loop, hence it cannot be used outside a for loop


7)  difference between array and list
https://www.geeksforgeeks.org/array-python-set-1-introduction-functions/
ANS )
Data Types
Introduction to DataTypes
Strings
List
Tuples
Sets
Dictionary
Arrays Set 1, Set 2

8) Difference map,reduce and filter
lst = [1,2,3,4]
map => map(lambda x:x**2,lst)


filter => filter (lambda x:(x%2 ==0), lst)

reduce => reduce (lambda x:x>5,lst)

----------------------------------------------------------------


------------------------------ DAY 10 -----------------------------------------

1) arr = [[1,2,3],[4,5,6],[7,8,9]]
for i in range(0,3):
	print(arr[i].pop())


2)
val = 1.0
if val ==1.0:
    print ('heello lekhya')


output -> heello lekhya

3) val = '1234567890'
print (isintance(id(val), int))

output


4) name = strawberry

what happens when this code is executed?

Nameerror

5) a = "sri","lekhya"
print(type(a))

ans ) tuple


6) print (3*1**3) -> 3


7) print (float('12+34')) -> error


8) print (3^4) -> 7
https://en.wikipedia.org/wiki/XOR_gate

9) a = 1,2
b = (3,4)
[print(sum(x)) for x in [ a + b]]
ans) 10

10) print (float('nan'))
Ans) nan

11) l = [1,2,3]
a = ('naveen') * (l.__len__() - l[::-1][0])
print(a)

Ans) ()

12) print (range(10))

Ans) range(0,10)

13) print(list(range(0,10,0)))
Ans ) Error arg 3 in range cannot be zero

14) print(list(range(0,10,-2)))
Ans) []

15) print(list(range(0,10,15)))
Ans) [0]

16) print(list(range(10,0,1)))
Ans) []


Note:

1) what does range return when called as range(5)?

-------------------------------------------------------------------------------





-----------------------------------DAY 11-----------------------------------------


1) Create a generator which ranges from 10 to 25?
gen = (x for x in range(10,25))
print(next(gen))

2) create a generator for generating odd numbers
gen = (x for x in range(10,25) if x%2 != 0)
print(next(gen))

3) create a generator for generating even numbers
gen = (x for x in range(10,25) if x%2 == 0)
print(next(gen))

4) create a generator which generates alphabets from 'a' to 'z'
def alphabet_gen():
	for i in range(65, 92):
  	yield chr(i)


5) difference between an iterator and an iterable?
?

6) create a iterable using class dunder methods

 class generator:
...     def __init__(self, x):
...             self.x = x
...     def __iter__(self):
...             self.i = 0
...             return self
...     def __next__(self):
...             j = self.i
...             self.i = j+1
...             return j


7) create a generator using yield method
def genmethod():
	for i in range(5):
  	yield i


8) Write code to print only first line of the file without using readline

def r():
		with open(filename, r) as f:
         for line in f:
             yield line
             raise StopIteration


9) Write infinite loop of number that will never die using generator

def g():
	 i = 0
   while True:
       yield i

10) Write generator expression for the square of numbers

gen = (x**2 for x in range(1,10))

11) Difference between generator and iterator
genrator gives an object which is an iterator that can iterate over. uses yield
iterator returns an iterator object . iter()



NOTE:

Iterable vs Iterator vs Generator
https://nvie.com/posts/iterators-vs-generators/
-----------------------------------------------------------------


--------------------------- DAY 12 -----------------------------------



1) what happens if i use a return statement in generator function
StopIteration will be raised

2) Generator vs iterator vs iterable
Generator is a effective way of writing a iterator which return a iterator/generator object
iterator is mainly used to save memory and time to iterator over elements :P
iterable is a collection of container elements


3)can you reset a generator?

No

4) can you have multiple yield keyword in a generator funtion
the execution will stop at next element yield statement?? next element ante
okay until we call the next yield ah?

5) What happens if i do an iter() on an iterator implemented using class dunder methods
iterator object is created


6) create an fibonacci series generator function

def fib(limit):
    a,b = 0,1
    count = 1
    while True:
    		if count >limit:
        		return
				yield a
  	  	a,b = b,a+b
        count+=1


7) can you access elements from generator object using a dynamic index

Yes using coroutines

def infinite_looper(objects):
    count = 0
    while True:
        if count >= len(objects):
            count = 0
        message = yield objects[count]
        if message != None:
            count = 0 if message < 0 else message
        else:
            count += 1

>>> x = infinite_looper("A string with some words")
>>> next(x)
'A'
>>> x.send(9)
'w'
>>> x.send(10)

coroutines - yield




8) can strings have iterator objects?
yes

9) How can you convert a recursive function to generator?

# this is also co-routine topic
def recurse(x):
	  yield x
	  yield from recurse(x)

for (i, x) in enumerate(recurse(5)):
	  print(i, x)



10 What happens if i raise StopIteration in a generator function.

def s():
    i = 0
    for i in range(0,2):
        yield i
    raise StopIteration

>>
0
1
StopIteration
RuntimeError: generator raised StopIteration

-----------------------------------------------------------------

Notes:

Coroutines
yield from



------------------------------------------------------------------





----------------------- DAY 13 --------------------------------------

1) Write Decorator example for a even functions

@decorator_fun
def decorated_fun():
	print("decorated function")

def decorator_fun(func):
	def inner_func():
  	func()
  	print("extended decorated function")
  return inner_func

2) write decrorator example for a functions with arguments



Output:

  NAME:
    my name is srilekhya
  DOB : 5

3) write decorator with out using '@'

def decorator_fun(func):
	def inner_func():
  	func()
  	print("extended decorated function")
  return inner_func

def decorated_fun():
	print("decorated function")


>>> a = decorator_fun(decorated_fun)
>>> print(a)
<function decorator_fun.<locals>.inner_func at 0x1160dd7b8>
>>> a()
decorated function
extended



4) write decorator example which takes parameters for a function

def decorator(*args):
        def inner_dec(func):
                def inner_inner_func(x):
                        func()
                        print(args[0] + "extended")
                return inner_inner_func
        return inner_dec


@decorator('a',10)
def example(x):
  print ('this shis')

example()



5) write decorator example which takes parameters for a function with aruguments

def decorator(*args):
        def inner_dec(func):
                def inner_inner_func(x):
                        func(x)
                        print(*args )
                        print(x)
                return inner_inner_func
        return inner_dec


@decorator('a',10)
def lekhya(sri):
  print ('this shis')


lekhya('l')

--------------------------------------------------------------------
NOTE:

def decorator(*args):
      def inner_dec(func):
              func()
              print(args[0] + "extended")
      return inner_dec


@decorator('a',10)
def example():
  print ('this shis')



----------------------------------------------------------------------


----------------------- DAY 14 -------------------------


1) write decrorator example for a functions with arguments

def decor(func):
	def inner_func(arg):
  	print("surname :", arg)
    func(arg)
  return inner_func

@decor
def lekhya(surname):
    print ("this is lekhya's funciton")

lekhya("lanka")
output:

surname : lanka
this is lekhya's function

2) write decorator with out using '@'

def decor(func):
	def inner_func():
  	print("surname :")
    func()
  return inner_func

def lekhya():
    print ("this is lekhya's funciton")

a = decor(lekhya)
a()

3) write decorator example which takes parameters for a function

def decor(arg):
	def inner_func(func):
  		def inner_inner_func():
      	print("inner inner function", arg)
        func()
      return inner_inner_func
  return inner_func

@decor("abc")
def lekhya():
	print("this is lekhya")

lekhya()


4) Write a decorator for calculating the execution time of a function?
def decor(func):
	def inner_func():
  	start_time = ctime.time
    func()
    end_time = ctime.time
    exec_time = end_time - start_time
    print(exec_time)
  return inner_func

@decor
def lekhya():
	print("my name is lekhya")

lekhya()


----------------------------------------------------------

def decorator(*args):
      def inner_dec(func):
              func()
              print(args[0] + "extended")
      return inner_dec


@decorator('a',10)
def example():
  print ('this shis')



e = decorator('a',10)(example)

https://wsvincent.com/python-wat-integer-cache/



a = 10
b = a
a = 15

print(a is b)
print(a is 15)
print(id(a),id(b),a,b,)
print(a == b)

=> mark lutz

----------------------------------------------------------




---------------------- Day 15 -------------------------

1) Write a decorator for a function which has return value

def decor(func):
    def inner_func():
        print("in the inner function")
        a = func()
        print(a)
        return a
    return inner_func

@decor
def lekhya():
    return 'my name is SL'


value = lekhya()
print (value + '= S/w engineer')

2a) Write a decorator which can take variable parameters

def format_name(*arg):
        def outer_name(func):
                def inner():
                        func()
                        print(*arg)
                return inner
        return outer_name

@format_name("1", "2", "3")
def lekhya():
        print ('my name')

lekhya()

2b) Write a decorator  and function which can take variable parameters

def format_name(*args):
        def outer_name(func):
                def inner(arg):
                        func(arg)
                        print(*args)
                return inner
        return outer_name

@format_name("1", "2", "3")
def lekhya(surname):
        print ('my name' + surname)

lekhya('sri')

3) Chaining of decorators,simple, and parameterized

def dob(func):
        def inner_func():
                print('dob')
                func()
        return inner_func

def surname(func):
        def inner_func1():
                print('surname')
                func()
        return inner_func1


@dob
@surname
def lekhya():
        print ('my name')

lekhya()

@dob
@surname
def lekhya():
  	print('My name is lekhya')

    dob(surname(lekhya)())()

lekhya()
OUTPUT:
  05051991
  lanka
  My name is lekhya

def dob(args):
        def outer_func(func):
                def inner_func(args3):
                        print(args)
                        func(args3)
                return inner_func
        return outer_func

def surname(args1):
        def outer_func(func):
                def inner_func1(args2):
                        print(args1)
                        func(args2)
                return inner_func1
        return outer_func


@dob('05051991')
@surname('lanka')
def lekhya(surname):
        print ('my name' + surname)

lekhya('sri')


4) write a decorator which counts Number of calls to functions

def decor(func):
        def inner():
                inner.num += 1
                func()
                print(inner.__dict__)
        inner.num = 0
        print('out', inner.__class__)

        return inner

@decor
def lekhya():
        print('test')

lekhya()
lekhya()
lekhya()
print(lekhya.num)

OUTPUT:
  out <class 'function'>
test
{'num': 1}
test
{'num': 2}
test
{'num': 3}
3


5) Closures

6) write a class decorator

--------------------------------------------------------

Notes:


--------------------------------------------------------



---------------------- Day 16 -------------------------



5) Closures

#closure

def func(val):
    value = val
    def inner():
        #value = val
        print ('wow',value)
        #return value
    print(func.__dict__,dir(func),locals())
    print('locals',locals())
    print('globals',globals())
    return inner

s = func(1504)
print('glovlas outside',globals())
print(s.__closure__,type(s),)
print(s.__closure__[0].cell_contents)
print(s.__dict__,dir(s))
store1 = s()
del func
store2 = s()

++++++++++++++++++++++++++++++++++
def make_multiplier_of(n):

    def multiplier(x):
        print(x,type(n),n.__name__,dir(),locals(),globals())
        return x * n
    return multiplier

# Multiplier of 3
times3 = make_multiplier_of(3)
# Multiplier of 5
times5 = make_multiplier_of(5)

# Output: 27
print(times3(9))

# Output: 15
print(times5(3))

# Output: 30
print(times5(times3(2)))

@make_multiplier_of
def example(val):
    print (val)

a = example(10)

print(a)

+++++++++++++++++++++++++++++++



>>> def make_mul_of(n):
...     def mul(*args):
...             return args[0]*args[1]
...     return mul
...
>>> @make_mul_of
... def example(a, b):
...     print(a,b)
...
>>> example(9,3)
27


++++++++++++++++++++++++++++++


'''hello vs bye'''
import timeit

start = timeit.default_timer()
def message(txt):
    def out(txt2):
        return txt + txt2
    return out

mid = timeit.default_timer()
hello = message('Welcome to Navlan Creations: ')
bye = message('Thank you for visiting Navlan : ')


print(hello('naveen'),)
print(bye('naveen'),)
end = timeit.default_timer()
print('total closure','{:f}'.format(end -start),end-start)
print('creation of closure','{:f}'.format(mid- start),mid-start)
print('call to closure','{:f}'.format(end -mid),end-mid)

print(hello('lekhya'))

print(bye('lekhya'))


# rewrite this using decorator
start = timeit.default_timer()
def decor (func):
    def inner(b):
        func(b)

    return inner

@decor
def example(b):
    print('welcome to lalaland'+b)

@decor
def out(b):
    print('exit',b)

mid = timeit.default_timer()
example('naveen')
out('naveen')
end = timeit.default_timer()
print('total decors','{:f}'.format(end -start),end-start)
print('creation of decor','{:f}'.format(mid- start),mid-start)
print('call to decors','{:f}'.format((end -mid)),end-mid)

++++++++++++++++++++++++++++++++++++++++++++++++++

6) write a class decorator

class dec:
  def __init__(self, func):
    self.func = func

  def __call__(self):
    self.func()
    print("decorating the func")
@dec
def func():
  print("my name is lekhya")

func()

7) memotization

import time
def fib(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fib(n-1) + fib(n-2)


s = time.perf_counter()
fib(35)
e = time.perf_counter()
print(f"{e -s:6f}secs")

def memo(func):

    cache = {}

    def inner(value):
        #print('go',value)
        if value not in cache:
            #print('come',value)
            cache[value] = func(value)
            #print('huahaha')
        #print(cache)
        #print(locals())
        #print(globals())
        return cache[value]

    return inner

@memo
def fibm(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibm(n-1) + fibm(n-2)

# 19 18
# (18 17) (17 16)
# (17 16) (16 15) (16 15) (15 14)

s = time.perf_counter()
fibm(20)
e = time.perf_counter()
print(f"{e -s:6f}secs")

--------------------------------------------------------

Notes:


--------------------------------------------------------

--------------------- DAY 17 ------------------------

https://medium.com/@vadimpushtaev/decorator-inside-python-class-1e74d23107f6

class Dec(object):
    """docstring for ."""

    def __init__(self, func):
        print('lekhya',func)

        self.func = func

    def __call__(self):
        print("dec class")
        self.func()

@Dec
def naveen():
    print("he is a baby fellow")

naveen()


def naveen1():
    print("he is jaanu fellow")
    return naveen1

# a = naveen1()

n = Dec(naveen1())
print(n)
n()
# n1 = Dec()
# print(n1(naveen1))



--------------------------------------------------------


class A():
  def func():
    pass

  print(func)  # prints '<function func at 0x7fa0cdbc75f0>'


a = A()
print(A.func)   # prints '<unbound method A.func>'
print(A().func) # pr
print(type(A), type(A()), type(a.func))
print(type(A.func))
print(dir(A) == dir(A()))
print(A().__dict__)


--------------------------------------------------------

class lekhya:
    def __init__(self, a):
        self.a = a

    def __call__(self,b):
        print("naveen", self.a)
        return b

l = lekhya('navlan')
print(l)
print(l('lanka'))

dec(naveen1())







-----------------------------------------------------
Note:
 ---> why to use a class decorator over function decorator
 ---> function vs method
 ---> class A:
 				def func(self):
        	pass
        print(func)
      print(A.func)
      print(A().func)
      why isA.func referred as function, where A().func reffered as method
-----------------------------------------------------